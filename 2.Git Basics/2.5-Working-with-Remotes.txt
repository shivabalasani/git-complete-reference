Working with Remotes

Showing Your Remotes
To see which remote servers you have configured, you can run the git remote command. It lists the shortnames of each remote handle you’ve specified. 
If you’ve cloned your repository, you should at least see origin — that is the default name Git gives to the server you cloned from:
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
$ cd ticgit
$ git remote
origin

You can also specify -v, which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote:
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)

If you have more than one remote, the command lists them all. For example, a repository with multiple remotes for working with several collaborators might look 
something like this.
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Adding Remote Repositories
git clone command implicitly adds the origin remote for you. Here’s how to add a new remote explicitly. To add a new remote Git repository as a shortname you can 
reference easily, run git remote add <shortname> <url>:

$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)

Now you can use the string pb on the command line in lieu of the whole URL. For example, if you want to fetch all the information that Paul has but that you don’t 
yet have in your repository, you can run git fetch pb:
$ git fetch pb

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Fetching and Pulling from Your Remotes
$ git fetch <remote>
The command goes out to that remote project and pulls down all the data from that remote project that you don’t have yet. After you do this, you should have 
references to all the branches from that remote, which you can merge in or inspect at any time.
If you clone a repository, the command automatically adds that remote repository under the name “origin”. So, git fetch origin fetches any new work that has been 
pushed to that server since you cloned (or last fetched from) it.It’s important to note that the git fetch command only downloads the data to your local repository 
— it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready.

If your current branch is set up to track a remote branch, you can use the git pull command to automatically fetch and then merge that remote branch into your 
current branch.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Pushing to Your Remotes
When you have your project at a point that you want to share, you have to push it upstream. The command for this is simple: git push <remote> <branch>. 
If you want to push your master branch to your origin server (again, cloning generally sets up both of those names for you automatically), then you can run this to 
push any commits you’ve done back up to the server:

$ git push origin master

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Inspecting a Remote
If you want to see more information about a particular remote, you can use the git remote show <remote> command.

$ git remote show origin

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Renaming and Removing Remotes
You can run git remote rename to change a remote’s shortname. For instance, if you want to rename pb to paul, you can do so with git remote rename:

$ git remote rename pb paul
$ git remote
origin
paul

If you want to remove a remote for some reason — you’ve moved the server or are no longer using a particular mirror, or perhaps a contributor isn’t contributing 
anymore — you can either use git remote remove or git remote rm:

$ git remote remove paul
$ git remote
origin