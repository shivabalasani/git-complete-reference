Remember that each file in your working directory can be in one of two states: tracked or untracked. Tracked files are files that were in the last snapshot; 
they can be unmodified, modified, or staged. In short, tracked files are files that Git knows about.

Untracked files are everything else — any files in your working directory that were not in your last snapshot and are not in your staging area. When you first 
clone a repository, all of your files will be tracked and unmodified because Git just checked them out and you haven’t edited anything.

As you edit files, Git sees them as modified, because you’ve changed them since your last commit. As you work, you selectively stage these modified files and then 
commit all those staged changes, and the cycle repeats.


---------------------------------------------------------------------------------------------------------------------------------------------------------------
Checking the Status of Your Files
The main tool you use to determine which files are in which state is the git status command. If you run this command directly after a clone, you see:

$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean

Let’s say you add a new file to your project, a simple README file. If the file didn’t exist before, and you run git status, you see your untracked file like so:
$ echo 'My Project' > README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use "git add <file>..." to include in what will be committed)
    README
nothing added to commit but untracked files present (use "git add" to track)

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Tracking New Files
In order to begin tracking a new file, you use the command git add. To begin tracking the README file, you can run this:
$ git add README

If you run your status command again, you can see that your README file is now tracked and staged to be committed:
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
    new file:   README

The git add command takes a path name for either a file or a directory; if it’s a directory, the command adds all the files in that directory recursively.

----------------------------------------------------------------------------------------------------------------------------------------------------------------

Staging Modified Files
If you change a previously tracked file called CONTRIBUTING.md and then run your git status command again, you get something that looks like this:

$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)
    new file:   README
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)
    modified:   CONTRIBUTING.md

Let’s run git add now to stage the CONTRIBUTING.md file, and then run git status again:

$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)
    new file:   README
    modified:   CONTRIBUTING.md

 If you modify any of the above file after you run git add, you have to run git add again to stage the latest version of the file:

 ----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Short Status
 While the git status output is pretty comprehensive, it’s also quite wordy. Git also has a short status flag so you can see your changes in a more compact way. 
 If you run git status -s or git status --short you get a far more simplified output from the command:

 $ git status -s
 M README
 MM Rakefile
 A  lib/git.rb
 M  lib/simplegit.rb
 ?? LICENSE.txt

New files that aren’t tracked have a ?? next to them, new files that have been added to the staging area have an A, modified files have an M and so on. 
The README file is modified in the working directory but not yet staged, while the lib/simplegit.rb file is modified and staged. The Rakefile was modified, 
staged and then modified again, so there are changes to it that are both staged and unstaged.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Ignoring Files
$ cat .gitignore
*.[oa]
*~

The first line tells Git to ignore any files ending in “.o” or “.a” — object and archive files that may be the product of building your code. 
The second line tells Git to ignore all files whose names end with a tilde (~).

The rules for the patterns you can put in the .gitignore file are as follows:
Blank lines or lines starting with # are ignored.
Standard glob patterns work, and will be applied recursively throughout the entire working tree.
You can start patterns with a forward slash (/) to avoid recursivity.
You can end patterns with a forward slash (/) to specify a directory.
You can negate a pattern by starting it with an exclamation point (!).

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Viewing Your Staged and Unstaged Changes

To see what you’ve changed but not yet staged, type git diff with no other arguments:
$ git diff

If you want to see what you’ve staged that will go into your next commit, you can use git diff --staged. 
This command compares your staged changes to your last commit:
$ git diff --staged

It’s important to note that git diff by itself doesn’t show all changes made since your last commit — only changes that are still unstaged.
If you’ve staged all of your changes, git diff will give you no output.
You can use git diff to see what is still unstaged: and git diff --cached to see what you’ve staged so far (--staged and --cached are synonyms):
$ git diff --cached

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Committing Your Changes

Now that your staging area is set up the way you want it, you can commit your changes. Remember that anything that is still unstaged — any files you have created 
or modified that you haven’t run git add on since you edited them — won’t go into this commit. They will stay as modified files on your disk. In this case, 
let’s say that the last time you ran git status, you saw that everything was staged, so you’re ready to commit your changes. The simplest way to commit is to type 
$ git commit

Alternatively, you can type your commit message inline with the commit command by specifying it after a -m flag, like this:
$ git commit -m "Story 182: Fix benchmarks for speed"