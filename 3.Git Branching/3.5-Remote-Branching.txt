Remote Branches
Remote references are references (pointers) in your remote repositories, including branches, tags, and so on. You can get a full list of remote references 
explicitly with git ls-remote <remote>, or git remote show <remote> for remote branches as well as more information. Nevertheless, a more common way is to take 
advantage of remote-tracking branches.

$git ls-remote <remote>, or git remote show <remote> 

Remote-tracking branches are references to the state of remote branches. They’re local references that you can’t move; Git moves them for you whenever you do any 
network communication, to make sure they accurately represent the state of the remote repository. 
Remote-tracking branch names take the form <remote>/<branch>. For instance, if you wanted to see what the master branch on your origin remote looked like as of the 
last time you communicated with it, you would check the origin/master branch. If you were working on an issue with a partner and they pushed up an iss53 branch, 
you might have your own local iss53 branch, but the branch on the server would be represented by the remote-tracking branch origin/iss53.

“origin” is not special
Just like the branch name “master” does not have any special meaning in Git, neither does “origin”. While “master” is the default name for a starting branch when 
you run git init which is the only reason it’s widely used, “origin” is the default name for a remote when you run git clone. If you run git clone -o booyah instead,
then you will have booyah/master as your default remote branch.

Server and local repositories after cloning
If you do some work on your local master branch, and, in the meantime, someone else pushes to git.ourcompany.com and updates its master branch, then your histories
move forward differently. Also, as long as you stay out of contact with your origin server, your origin/master pointer doesn’t move.

Local and remote work can diverge
To synchronize your work with a given remote, you run a git fetch <remote> command (in our case, git fetch origin). This command looks up which server “origin” 
is (in this case, it’s git.ourcompany.com), fetches any data from it that you don’t yet have, and updates your local database, moving your origin/master pointer 
to its new, more up-to-date position.
git fetch updates your remote-tracking branches

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Pushing
If you have a branch named serverfix that you want to work on with others, you can push it up the same way you pushed your first branch. 
Run git push <remote> <branch>:

$ git push origin serverfix
This is a bit of a shortcut. Git automatically expands the serverfix branchname out to refs/heads/serverfix:refs/heads/serverfix, which means, 
“Take my serverfix local branch and push it to update the remote’s serverfix branch.” 

 You can also do 
 $ git push origin serverfix:serverfix,
 which does the same thing — it says, “Take my serverfix and make it the remote’s serverfix.” You can use this format to push a local branch into a remote branch 
 that is named differently. If you didn’t want it to be called serverfix on the remote, you could instead run 

 $ git push origin serverfix:awesomebranch 
 to push your local serverfix branch to the awesomebranch branch on the remote project.

Don’t type your password every time
If you don’t want to type password every single time you push, you can set up a “credential cache”. The simplest is just to keep it in memory for a few minutes, 
which you can easily set up by running 
$ git config --global credential.helper cache.

The next time one of your collaborators fetches from the server, they will get a reference to where the server’s version of serverfix is under the remote branch 
origin/serverfix:

$ git fetch origin

It’s important to note that when you do a fetch that brings down new remote-tracking branches, you don’t automatically have local, editable copies of them. 
In other words, in this case, you don’t have a new serverfix branch — you have only an origin/serverfix pointer that you can’t modify.
To merge this work into your current working branch, you can run git merge origin/serverfix. If you want your own serverfix branch that you can work on, 
you can base it off your remote-tracking branch:

$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
This gives you a local branch that you can work on that starts where origin/serverfix is.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Tracking Branches
Checking out a local branch from a remote-tracking branch automatically creates what is called a “tracking branch” (and the branch it tracks is called an 
“upstream branch”).

When you clone a repository, it generally automatically creates a master branch that tracks origin/master. However, you can set up other tracking branches if you 
wish — ones that track branches on other remotes, or don’t track the master branch

$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'

In fact, this is so common that there’s even a shortcut for that shortcut. If the branch name you’re trying to checkout (a) doesn’t exist and (b) exactly matches a 
name on only one remote, Git will create a tracking branch for you:
$ git checkout serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'

To set up a local branch with a different name than the remote branch, you can easily use the first version with a different local branch name:
$ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'sf'
Now, your local branch sf will automatically pull from origin/serverfix.

If you already have a local branch and want to set it to a remote branch you just pulled down, or want to change the upstream branch you’re tracking, you can use
the -u or --set-upstream-to option to git branch to explicitly set it at any time.
$ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.

If you want to see what tracking branches you have set up, you can use the -vv option to git branch.
$ git branch -vv

If you want totally up to date ahead and behind numbers, you’ll need to fetch from all your remotes right before running this. You could do that like this:
$ git fetch --all; git branch -vv
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Pulling
While the git fetch command will fetch all the changes on the server that you don’t have yet, it will not modify your working directory at all. It will simply get 
the data for you and let you merge it yourself. However, there is a command called git pull which is essentially a git fetch immediately followed by a git merge 
in most cases. 
Generally it’s better to simply use the fetch and merge commands explicitly as the magic of git pull can often be confusing.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Deleting Remote Branches
Suppose you’re done with a remote branch — say you and your collaborators are finished with a feature and have merged it into your remote’s master branch (or 
whatever branch your stable codeline is in). You can delete a remote branch using the --delete option to git push. If you want to delete your serverfix branch 
from the server, you run the following:

$ git push origin --delete serverfix
To https://github.com/schacon/simplegit
 - [deleted]         serverfix

Basically all this does is remove the pointer from the server. The Git server will generally keep the data there for a while until a garbage collection runs, 
so if it was accidentally deleted, it’s often easy to recover.