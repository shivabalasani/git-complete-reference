Long-Running Branches
Because Git uses a simple three-way merge, merging from one branch into another multiple times over a long period is generally easy to do. This means you can have 
several branches that are always open and that you use for different stages of your development cycle; you can merge regularly from some of them into others.

Topic Branches
Topic branches, however, are useful in projects of any size. A topic branch is a short-lived branch that you create and use for a single particular feature or 
related work. This is something you’ve likely never done with a VCS before because it’s generally too expensive to create and merge branches. But in Git it’s 
common to create, work on, merge, and delete branches several times a day.

You saw this in the last section with the iss53 and hotfix branches you created. You did a few commits on them and deleted them directly after merging them into 
your main branch. This technique allows you to context-switch quickly and completely — because your work is separated into silos where all the changes in that branch
have to do with that topic, it’s easier to see what has happened during code review and such. You can keep the changes there for minutes, days, or months, and merge
them in when they’re ready, regardless of the order in which they were created or worked on.

It’s important to remember when you’re doing all this that these branches are completely local. When you’re branching and merging, everything is being done only in 
your Git repository — there is no communication with the server.
