Branches in a Nutshell
Git doesn’t store data as a series of changesets or differences, but instead as a series of snapshots.

When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged. This object also contains the author’s name 
and email address, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for 
the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Creating a New Branch
What happens when you create a new branch? Well, doing so creates a new pointer for you to move around. Let’s say you want to create a new branch called testing. 
You do this with the git branch command:

$ git branch testing
This creates a new pointer to the same commit you’re currently on.How does Git know what branch you’re currently on? It keeps a special pointer called HEAD. 
You can easily see this by running a simple git log command that shows you where the branch pointers are pointing. This option is called --decorate.

$ git log --oneline --decorate
f30ab (HEAD -> master, testing) add feature #32 - ability to add new formats to the central interface
34ac2 Fixed bug #1328 - stack overflow under certain conditions
98ca9 The initial commit of my project

You can see the master and testing branches that are right there next to the f30ab commit.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Switching Branches
To switch to an existing branch, you run the git checkout command. Let’s switch to the new testing branch:

$ git checkout testing
This moves HEAD to point to the testing branch.
git log will only show commits below the branch you’ve checked out.
To show all of the branches, add --all to your git log command.

Divergent history
You can also see this easily with the git log command. If you run git log --oneline --decorate --graph --all it will print out the history of your commits, 
showing where your branch pointers are and how your history has diverged.
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project

Because a branch in Git is actually a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy.
Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).

Creating a new branch and switching to it at the same time
It’s typical to create a new branch and want to switch to that new branch at the same time — this can be done in one operation with 
$ git checkout -b <newbranchname>.